@use "liste";

/* @use doit être écrit avant toute autre règles. Il permet d'importer un fichier "partial" (qui comment avec "_". Les fichiers partials ne sont pas compilé sauf si importé. */

h1{
    color: red;
    }

h2{
    color: blue;
    }

h3{
    color: green;
    }

// ------------------------------------ NESTING / Nidification ------------------ //

/* Le nesting permet d'inclure des selecteurs dans un autre selecteur permettant ainsi de ranger les enfants dans leurs parents sans avoir à répéter leurs noms.*/

 footer{
    background-color: yellow;
    .copy{
        background-color: purple;
        }
            &:hover{
                background-color: orange;
                }
    }           

// ---------------------------------- Les Variables -----------------------------//

/* Les variables scss ont une syntaxe un peu plus simple et n'apaparaissent pas dans les compilations */

$colorMain: violet;
.truc5{
    background-color: $colorMain;
}

// ---------------------------------- Extends -----------------------------//

/* Extends permet de reprendre un morceau de css et de le réutiliser à plusieurs endroits */

%flexCenter{
    display: flex;
    justify-content: center;
    align-items: center;
}

header{
    @extend %flexCenter;
    // Je peux aussi l'utiliser avec le nom d'une classe afin de copier le code que j'ai appliqué à cette classe. //
    @extend .truc5;
}

main ul{
    @extend %flexCenter;
    flex-direction: column;
}

// ---------------------------------- Mixin -----------------------------//

@mixin absol($top:50%, $l:50%, $tr1:-50%, $tr2: -50%){
    position:absolute;
    top: $top;
    left: $l;
    transform: translate($tr1, $tr2);
}

.copy{
    font-size: 4rem;
    background-color: aquamarine;
    @include absol(90%, 90%);
}

.menu{
    @include absol();
}

// ---------------------------------- Fonction -----------------------------//

/* Une fonction scss permet de donner une valeur en entrée pour en récupérer une différente en sortie. Par exemple ici on a une fonction qui retourne une coueleur complémentaire et éclairci de la couleur donnée en argument*/

@function complight($color){
// complement est une fonction scss qui retourne une couleur complémentaire //    
    $comp: complement($color);
// lighten est une fonction scss qui retourne une couleur éclairci //    
    $light: lighten($comp, 5%);
// @return permet d'indiquer ce que l'on va retourner //    
    @return $light;
}

.copy{
    color:brown;
    background-color: compLight(brown);
}

// ---------------------------------- Condition -----------------------------//

@mixin radius($w, $h){
    width: $w;
    height: $h;
/* @if permet d'indiquer des propriétés qui ne sernt activé qu'a certaines conditions, ici seulement si $w et $h sont égaux */    
    @if $w == $h{
        border-radius: 5px;
    }
/* @else permet d'ajouter des propriétes qui seront activé seulement si la condition précédente est fausse */
    @else{
        border-radius: 5px;
    }
}

.copy{
    @include radius(8rem, 8rem);
}

.menu{
    @include radius(300px, 200px)
}